package Util;





// Class    : LinkedListNode
// Author   : Brett Carter
// Date     : 26/3/96 Created.
//            
// Purpose  : Item for a linked list.
//            
// *************************************************************************

import java.lang.Object;


class LinkedListItem
{
  public LinkedListItem prev = null;
  public LinkedListItem next = null;
  public Object data = null;

  public void LinkedListItem( LinkedListItem aPrev, 
                              LinkedListItem aNext, Object aData )
  {
    prev = aPrev;
    next = aNext;
    data = aData;
  }

  public void LinkedListItem()
  {
    prev = null;
    next = null;
    data = null;
  }

}




//###########################################################################
// Class    : LinkedList
// Author   : Brett Carter
// Date     : 26/3/96 Created.
//            
// Purpose  : Simple linked list.
//            
// *************************************************************************

public class LinkedList
{
  // Variables
  LinkedListItem head;
  LinkedListItem tail;

  LinkedListItem current;
  int count;


  // *************************************************************************
  // Method      : COnstructor
  // Parameters  : none
  // Return Type : none
  // Description : Initializes variables
  //
  public void LinkedList()
  {
    head = null;
    tail = null;
    current = null;
    count = 0;
  }



  // *************************************************************************
  // Method      : getFirst
  // Parameters  : none
  // Return Type : Object
  // Description : returns the first item in the list.
  //
  public Object getFirst()
  {
    if ( head != null )
    {
      current = head;
      return current.data;
    }
    else
    {
      return null;
    }
  }



  // *************************************************************************
  // Method      : getLast
  // Parameters  : none
  // Return Type : Object
  // Description : Returns the data in the last item in the list
  //
  public Object getLast()
  {
    if ( tail != null )
    {
      current = tail;
      return tail.data;
    }  
    else
    {
      return null;
    }
  }



  // *************************************************************************
  // Method      : getNext
  // Parameters  : none
  // Return Type : Object
  // Description : Gets the data for the next item in the list.
  //
  public Object getNext()
  {
    if (( current == null) || ( current.next == null ))
    {
      return null;
    }
    else
    {
      current = current.next;
      return current.data;
    }
  }



  // *************************************************************************
  // Method      : getPrev
  // Parameters  : none
  // Return Type : Object
  // Description : gets the next item in the list
  //
  public Object getPrev()
  {
    if (( current == null) || ( current.prev == null ))
    {
      return null;
    }
    else
    {
      current = current.prev;
      return current.data;
    }
  }



  // *************************************************************************
  // Method      : getCurrent
  // Parameters  : none
  // Return Type : Object
  // Description : returns the data for the current position in the list
  //
  public Object getCurrent()
  {
    if ( current != null )
    {
      return current.data;
    }
    else
    {
      return null;
    }
  }



  // *************************************************************************
  // Method      : itemCount
  // Parameters  : none
  // Return Type : int
  // Description : returns the number of items contained in the list.
  //
  public int itemCount()
  {
    return count;
  }



  // *************************************************************************
  // Method      : addAfter
  // Parameters  : Object
  // Return Type : none
  // Description : Add anitem containing the specified data after the current
  //               item. If no current item is selected, the end of the list
  //               is used.
  //
  public void addAfter( Object theData )
  {
 
    LinkedListItem newitem = new LinkedListItem();

    if ( head == null )
    {
      newitem.next = null;
      newitem.prev = null;
      newitem.data = theData;
        
      head = newitem;
      tail = newitem;
    }
    else
    {
      if ( current == null )
      {
        current = tail;
      }

      newitem.data = theData;
      newitem.prev = current;
      newitem.next = current.next;
      
      if ( current.next != null)
      {
        current.next.prev = newitem;
      }

      current.next = newitem;

      if ( tail == current)
      {
        tail = newitem;
      }
    }
    count++;
  }






  // *************************************************************************
  // Method      : addBefore
  // Parameters  : Object
  // Return Type : none
  // Description : Add the specified data top the list before the 
  //               current position. If no current position is selected,
  //               the start of the list is used.
  //
  public void addBefore( Object theData )
  {
 
    LinkedListItem newitem = new LinkedListItem();

    if ( head == null )
    {
      newitem.next = null;
      newitem.prev = null;
      newitem.data = theData;
        
      head = newitem;
      tail = newitem;
    }
    else
    {
      if ( current == null )
      {
        current = head;
      }

      newitem.data = theData;
      newitem.prev = current.prev;
      newitem.next = current;
      
      if ( current.prev != null)
      {
        current.prev.next = newitem;
      }

      current.prev = newitem;

      if ( head == current)
      {
        head = newitem;
      }
    }
    count++;
  }


  // *************************************************************************
  // Method      : remove
  // Parameters  : none
  // Return Type : int
  // Description : Removes the current item from the list. If no curent item 
  //               is selected, -1 is returnd. Otherwise, 0 is returned.
  //
  public int remove()
  {
    if ( current == null )
    {
      return -1;
    }
    else
    {
      LinkedListItem tmp = null;
    
      if ((current.prev == null) && (current.next == null))
      {
        head = null;
        tail = null;
        tmp = null;
      }
     
      else if ((current.prev != null) && (current.next != null))
      {
        current.prev.next = current.next;
        current.next.prev = current.prev;
        tmp = current.prev;
      }

      else if ( current == head )
      {
        current.next.prev = null;
        head = current.next;
        tmp = head;
      }

      else if ( current == tail )
      {
        current.prev.next = null;
        tail = current.prev;
        tmp = tail;
      }


      // Disconnect all from current and Garbage Collection should pick it
      // up.
      current.prev = null;
      current.next = null;
      current.data = null;
      current = tmp;
      
      count--;
      return 0;

    }
  }




}









