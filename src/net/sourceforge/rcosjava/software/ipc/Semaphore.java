// ***********************************************************************
// FILE:        Semaphore.java
// PURPOSE:     Basic semaphore class.
// AUTHOR:      Bruce Jamieson
// MODIFIED:    Andrew Newman
// HISTORY:     30/03/96  Completed.
//              10/08/98  Changed to FIFO Queue for queued processes and
//                        changed to Vector for connected processes. AN
//              11/08/98  Removed iBlocked and iNumConnected. AN
// ***********************************************************************

package net.sourceforge.rcosjava.software.ipc;

import java.util.Hashtable;
import java.util.Vector;
import java.lang.String;
import net.sourceforge.rcosjava.software.memory.*;
import net.sourceforge.rcosjava.software.util.FIFOQueue;

public class Semaphore
{
  //Name given by application
  private String sempahoreName;
  //Arbitary ID generated by system.
  private int id;
  //ID of process that created the seamphore.
  private int ownerPID;
  //Current value in the semaphore.
  private int value = -1;
  //List of processes using the semaphore
  private Vector connectedProcesses = new Vector();
  //List of process blocked/waiting.
  private FIFOQueue theQueue = new FIFOQueue();

  public Semaphore(String sNewSemaphoreName, int iNewId,
    int ownerPID, int iNewValue)
  {
    this.open(ownerPID);
    sempahoreName = sNewSemaphoreName;
    id = iNewId;
    value = iNewValue;
  }

  public int getId()
  {
    return id;
  }

  public String getName()
  {
    return sempahoreName;
  }

  public void open(int iPID)
  {
    Integer iNewPID = new Integer(iPID);
    connectedProcesses.addElement(iNewPID);
  }

  public int close(int iPID)
  {
    Integer iOldPID = new Integer(iPID);
    connectedProcesses.removeElement(iOldPID);
    // IF there are no connections open to the sem, then the
    // sem should die..
    // Do this by returning the number connected
    // (Let someone else deal with the problem..)
    return (connectedProcesses.size());
  }

  public int signal()
  {
    // Raise the value of the semaphore OR return the
    // 1st id in the blocked Q..
    if (theQueue.size() == 0)
    {
      value++;
      // No one blocked so return -1
      return -1;
    }
    else
    {
      // Get the first element and remove it
      Integer iOldPID = (Integer) theQueue.retrieve();
      return (iOldPID.intValue());
    }
  }

  public int wait(int iPID)
  {
    // Dec the value of the semaphore OR add to the blocked Q
    if (value == 0)
    {
      //Add to the blocked Q and signal as such
      Integer iNewPID = new Integer(iPID);
      theQueue.insert(iNewPID);
      return -1;
    }
    else
    {
      value--;
      return value;
    }
  }
}
