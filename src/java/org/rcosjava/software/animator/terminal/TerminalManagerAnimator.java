package org.rcosjava.software.animator.terminal;
import java.applet.*;

import java.awt.*;
import javax.swing.ImageIcon;
import java.net.*;
import java.util.*;
import org.rcosjava.messaging.messages.universal.TerminalBack;
import org.rcosjava.messaging.messages.universal.TerminalFront;
import org.rcosjava.messaging.messages.universal.TerminalToggle;
import org.rcosjava.messaging.postoffices.animator.AnimatorOffice;
import org.rcosjava.software.animator.RCOSAnimator;

/**
 * Terminal Manager Animator receives responses back from the operating system
 * to be interpretted and sent to the Terminal Manager Frame. This controls the
 * message received and the actions carried out on the Terminal Manager Frame.
 * It also sends message generated by user input (assuming it's correct).
 * <P>
 * <DT> <B>History:</B>
 * <DD> 21/02/97 Cleaned up. </DD> </DT>
 * <P>
 * @author Andrew Newman.
 * @author David Jones.
 * @created 24th of December 1996
 * @version 1.00 $Date$
 */
public class TerminalManagerAnimator extends RCOSAnimator
{
  /**
   * The id to register with the animator office.
   */
  private final static String MESSENGING_ID = "TerminalManagerAnimator";

  /**
   * Frame to display the results.
   */
  private TerminalManagerFrame myFrame;

  /**
   * Create an animator office, register with the animator office, set the size
   * of the frame and the images to use to represent the processes and the
   * buttons. The terminals may not fit on a even number so the number of
   * terminals and columns and rows is passed instead of just columns an rows.
   * e.g. 2 rows, 4 columns but a maximum of 7 terminals.
   *
   * @param postOffice the post office to register to.
   * @param x width of frame
   * @param y height of frame
   * @param noTerminals maximum number of terminals to display
   * @param noTerminalColumns number of columns of terminals to display
   * @param noTerminalRows number of rows of terminals to display
   * @param images the images to use for process and buttons.
   */
  public TerminalManagerAnimator(AnimatorOffice postOffice, int x, int y,
      ImageIcon[] images, int noTerminals, int noTerminalColumns,
      int noTerminalRows)
  {
    super(MESSENGING_ID, postOffice);
    myFrame = new TerminalManagerFrame(x, y, images, noTerminals,
        noTerminalColumns, noTerminalRows, this);
    myFrame.pack();
    myFrame.setSize(x, y);
  }

  /**
   * Description of the Method
   *
   * @param c Description of Parameter
   */
  public void setupLayout(Component c)
  {
    myFrame.setupLayout(c);
  }

  /**
   * Description of the Method
   */
  public void disposeFrame()
  {
    myFrame.dispose();
  }

  /**
   * Description of the Method
   */
  public void showFrame()
  {
    myFrame.setVisible(true);
  }

  /**
   * Description of the Method
   */
  public void hideFrame()
  {
    myFrame.setVisible(false);
  }

  /**
   * Indicate that a terminal is off (show the off terminal image). Calls the
   * frame's terminal off.
   *
   * @param terminalNo the index to the terminal to turn off.
   */
  public void terminalOff(int terminalNo)
  {
    myFrame.terminalOff(terminalNo);
  }

  /**
   * Indicate that a terminal is to be turned on. Calls the frame's terminal on.
   *
   * @param terminalNo Description of Parameter
   */
  public void terminalOn(int terminalNo)
  {
    myFrame.terminalOn(terminalNo);
  }

  /**
   * Indicate that a terminal is being toggled (switching states). Sends the
   * terminal toggle message to the Terminal Manager.
   *
   * @param terminalNo Description of Parameter
   */
  public void sendToggleTerminal(int terminalNo)
  {
    TerminalToggle message = new TerminalToggle(this, terminalNo);

    sendMessage(message);
  }

  /**
   * Show the terminal. Calls the terminalFront method in the frame.
   *
   * @param terminalNo Description of Parameter
   */
  public void terminalFront(int terminalNo)
  {
    myFrame.terminalFront(terminalNo);
  }

  /**
   * Send the terminal front message.
   *
   * @param terminalNo Description of Parameter
   */
  public void sendTerminalFront(int terminalNo)
  {
    TerminalFront message = new TerminalFront(this, terminalNo);

    sendMessage(message);
  }

  /**
   * Hide the terminal. Calls the terminalBack method in the frame.
   *
   * @param terminalNo Description of Parameter
   */
  public void terminalBack(int terminalNo)
  {
    myFrame.terminalBack(terminalNo);
  }

  /**
   * Sends the terminal back message.
   *
   * @param terminalNo Description of Parameter
   */
  public void sendTerminalBack(int terminalNo)
  {
    TerminalBack message = new TerminalBack(this, terminalNo);

    sendMessage(message);
  }
}
