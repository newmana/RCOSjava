package org.rcosjava.software.animator.ipc;import java.awt.*;import java.awt.image.*;import org.rcosjava.software.memory.MemoryReturn;/** * Description of the Class * * @author administrator * @created 28 April 2002 */public class MemoryGraphic extends Canvas{  /**   * Description of the Field   */  public final static Color readingColour = Color.blue;  /**   * Description of the Field   */  public final static Color writingColour = Color.red;  /**   * Description of the Field   */  public final static Color allocatedColour = Color.gray;  /**   * Description of the Field   */  public final static Color unallocatedColour = Color.black;  /**   * Description of the Field   */  private int id;  /**   * Description of the Field   */  private byte memoryType;  /**   * Description of the Field   */  private int memorySize;  /**   * Description of the Field   */  private int defaultWidth;  /**   * Description of the Field   */  private int defaultHeight;  /**   * Description of the Field   */  private Color currentColour = Color.gray;  /**   * Description of the Field   */  private Color textColour = Color.yellow;  /**   * Description of the Field   */  private Image memoryImage;  /**   * Description of the Field   */  private Font textFont = new Font("TimesRoman", Font.PLAIN, 12);  /**   * Description of the Field   */  private boolean allocated = false;  /**   * Description of the Field   */  private String text;  /**   * Constructor for the MemoryGraphic object   *   * @param newImage Description of Parameter   */  public MemoryGraphic(Image newImage)  {    super();    text = "";    memoryImage = newImage;    defaultWidth = memoryImage.getWidth(getParent());    defaultHeight = memoryImage.getHeight(getParent());    this.setSize(defaultWidth, defaultHeight);    //repaint();  }  /**   * Sets the CurrentColour attribute of the MemoryGraphic object   *   * @param newColour The new CurrentColour value   */  public void setCurrentColour(Color newColour)  {    currentColour = newColour;    this.repaint();  }  /**   * Sets the Allocated attribute of the MemoryGraphic object   *   * @param newMemoryReturn The new Allocated value   */  public void setAllocated(MemoryReturn newMemoryReturn)  {    setValues(newMemoryReturn);    allocated = true;  }  /**   * Sets the Deallocated attribute of the MemoryGraphic object   */  public void setDeallocated()  {    text = "";    allocated = false;    id = 0;    memoryType = 0;    memorySize = 0;    repaint();  }  /**   * Gets the Memory attribute of the MemoryGraphic object   *   * @param memoryId Description of Parameter   * @param memoryType Description of Parameter   * @return The Memory value   */  public boolean isMemory(int memoryId, byte memoryType)  {    return ((id == memoryId) && (memoryType == memoryType));  }  /**   * Description of the Method   *   * @param g Description of Parameter   */  public void paint(Graphics g)  {    FontMetrics fm = g.getFontMetrics();    //Using image width and height and text size    //center text (the program gets the font from    //the current Graphics context).    int iX = (defaultWidth / 2) - (fm.stringWidth(text) / 2);    int iY = (defaultHeight / 2) + (fm.getAscent() / 2);    if (allocated)    {      g.setColor(currentColour);    }    else    {      g.setColor(unallocatedColour);    }    g.drawImage(memoryImage, 0, 0, this);    g.fillRect(((int) defaultWidth / 2) - 10, ((int) defaultHeight / 2) - 10, 20, 20);    //When drawing text to the screen the x,y co-ordinate    //is of the baseline of the text.    g.setColor(textColour);    g.setFont(textFont);    g.drawString(text, iX, iY);  }  /**   * Sets the Values attribute of the MemoryGraphic object   *   * @param aMemret The new Values value   */  private void setValues(MemoryReturn aMemret)  {    text = "P" + aMemret.getPID();    id = aMemret.getPID();    memoryType = aMemret.getMemoryType();    memorySize = aMemret.getSize();    this.repaint();  }}