package org.rcosjava.software.animator.support;import java.applet.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.image.*;import java.io.*;import java.util.*;/** * Description of the Class * * @author administrator * @created 28 April 2002 */public class GraphicButton extends Canvas{//buttonPic is the image.//onButton and pressButton define when the mouse is over the button area and//when someone presses the mouse on that area respectively.//The button is the name or arguement of the object - to uniquely identify//it.  bDepress text indicates if the text on the button moves.  /**   * Description of the Field   */  public Image imgGreyPic, imgButtonUpPic, imgButtonDownPic;  /**   * Description of the Field   */  public String sTheButton;  /**   * Description of the Field   */  private boolean bOverButton, bPressedButton;  /**   * Description of the Field   */  private int iImageWidth, iImageHeight;  /**   * Description of the Field   */  private Font fTheFont;  /**   * Description of the Field   */  private Color cTextColour;  /**   * Description of the Field   */  private boolean bDepressText;  /**   * Description of the Field   */  private boolean bGreyedOut = false;  /**   * Description of the Field   */  private boolean bShowText;  /**   * Description of the Field   */  private ImageFilter filter;  /**   * Description of the Field   */  private ImageProducer producer;  /**   * Description of the Field   */  private GraphicButtonListener gblMouse = null;  /**   * Description of the Field   */  private ActionListener actionListener = null;  /*  This is the basic constructor.  @param iPic is the image that is displayed  on the background on the button.  @param sButton is the the name of the  event to be generated and is also the label on the button.*/  /**   * Constructor for the GraphicButton object   *   * @param iPic Description of Parameter   * @param sButton Description of Parameter   */  public GraphicButton(Image iPic, String sButton)  {    super();    bOverButton = false;    bPressedButton = false;    imgButtonUpPic = iPic;    imgButtonDownPic = iPic;    sTheButton = sButton;    cTextColour = Color.yellow;    fTheFont = new Font("TimesRoman", Font.PLAIN, 12);    iImageWidth = imgButtonUpPic.getWidth(getParent());    iImageHeight = imgButtonUpPic.getHeight(getParent());    bShowText = true;    setSize(iImageWidth, iImageHeight);    repaint();  }  /*  This allows a greater control over what is generated.  @param iPic is the  image that is displayed on the background on the button.  @param sButton  is the the name of the event to be generated and is also the label on  the button.  @param fFont is the type of Font to be used.  @cColour  sets the colour of the text to be displayed.*/  /**   * Constructor for the GraphicButton object   *   * @param iPicUp Description of Parameter   * @param iPicDown Description of Parameter   * @param sButton Description of Parameter   * @param fFont Description of Parameter   * @param cColour Description of Parameter   * @param bDepress Description of Parameter   */  public GraphicButton(Image iPicUp, Image iPicDown, String sButton,      Font fFont, Color cColour, boolean bDepress)  {    super();    bOverButton = false;    bPressedButton = false;    imgButtonUpPic = iPicUp;    imgButtonDownPic = iPicDown;    sTheButton = sButton;    fTheFont = fFont;    cTextColour = cColour;    iImageWidth = imgButtonUpPic.getWidth(getParent());    iImageHeight = imgButtonUpPic.getHeight(getParent());    bDepressText = bDepress;    bShowText = true;    setSize(iImageWidth, iImageHeight);    repaint();  }  /**   * Constructor for the GraphicButton object   *   * @param iPicUp Description of Parameter   * @param iPicDown Description of Parameter   * @param sButton Description of Parameter   * @param fFont Description of Parameter   * @param cColour Description of Parameter   * @param bDepress Description of Parameter   * @param bDisplayText Description of Parameter   */  public GraphicButton(Image iPicUp, Image iPicDown, String sButton,      Font fFont, Color cColour, boolean bDepress, boolean bDisplayText)  {    super();    bOverButton = false;    bPressedButton = false;    imgButtonUpPic = iPicUp;    imgButtonDownPic = iPicDown;    sTheButton = sButton;    fTheFont = fFont;    cTextColour = cColour;    iImageWidth = imgButtonUpPic.getWidth(getParent());    iImageHeight = imgButtonUpPic.getHeight(getParent());    bDepressText = bDepress;    bShowText = bDisplayText;    setSize(iImageWidth, iImageHeight);    repaint();  }  /**   * Constructor for the GraphicButton object   *   * @param iPicUp Description of Parameter   * @param iPicDown Description of Parameter   * @param sButton Description of Parameter   * @param fFont Description of Parameter   * @param cColour Description of Parameter   * @param bDepress Description of Parameter   * @param bDisplayText Description of Parameter   * @param bGreyed Description of Parameter   */  public GraphicButton(Image iPicUp, Image iPicDown, String sButton,      Font fFont, Color cColour, boolean bDepress, boolean bDisplayText,      boolean bGreyed)  {    super();    bOverButton = false;    bPressedButton = false;    imgButtonUpPic = iPicUp;    imgButtonDownPic = iPicDown;    sTheButton = sButton;    fTheFont = fFont;    cTextColour = cColour;    iImageWidth = imgButtonUpPic.getWidth(getParent());    iImageHeight = imgButtonUpPic.getHeight(getParent());    bDepressText = bDepress;    bShowText = bDisplayText;    bGreyedOut = bGreyed;    ImageFilter filter = new GreyOutImage();    producer = new FilteredImageSource(imgButtonUpPic.getSource(), filter);    imgGreyPic = this.createImage(producer);    setSize(iImageWidth, iImageHeight);    repaint();  }  /**   * Gets the MinimumSize attribute of the GraphicButton object   *   * @return The MinimumSize value   */  public Dimension getMinimumSize()  {    return getPreferredSize();  }  /**   * Gets the PreferredSize attribute of the GraphicButton object   *   * @return The PreferredSize value   */  public Dimension getPreferredSize()  {    return new Dimension(iImageWidth, iImageHeight);  }  /**   * Adds a feature to the Notify attribute of the GraphicButton object   */  public void addNotify()  {    super.addNotify();    if (gblMouse == null)    {      gblMouse = new GraphicButtonListener();      addMouseListener(gblMouse);    }    repaint();  }  /**   * Description of the Method   *   * @param g Description of Parameter   */  public void paint(Graphics g)  {    update(g);  }  /**   * Adds a feature to the ActionListener attribute of the GraphicButton object   *   * @param l The feature to be added to the ActionListener attribute   */  public void addActionListener(ActionListener l)  {    actionListener = AWTEventMulticaster.add(actionListener, l);  }  /**   * Description of the Method   *   * @param l Description of Parameter   */  public void removeActionListener(ActionListener l)  {    actionListener = AWTEventMulticaster.remove(actionListener, l);  }  /**   * Description of the Method   *   * @return Description of the Returned Value   */  public String toString()  {    return sTheButton;  }  /**   * Description of the Method   */  public void toggleGrey()  {    bGreyedOut = !bGreyedOut;  }  /**   * Description of the Method   *   * @param g Description of Parameter   */  public void update(Graphics g)  {    FontMetrics fm = g.getFontMetrics();    //Using image width and height and text size    //center text (the program gets the font from    //the current Graphics context).    int iX = (iImageWidth / 2) - (fm.stringWidth(sTheButton) / 2);    int iY = (iImageHeight / 2) + (fm.getAscent() / 2);    if ((bGreyedOut) && (imgGreyPic != null))    {      g.drawImage(imgGreyPic, 0, 0, this);    }    else    {      if (bPressedButton)      {        g.drawImage(imgButtonDownPic, 0, 0, this);      }      else      {        g.drawImage(imgButtonUpPic, 0, 0, this);      }    }    //When drawing text to the screen the x,y co-ordinate    //is of the baseline of the text.    if (bShowText)    {      if (bGreyedOut)      {        g.setColor(Color.lightGray);      }      else      {        g.setColor(cTextColour);      }      g.setFont(fTheFont);      if (bDepressText && bPressedButton)      {        g.drawString(sTheButton, iX + 1, iY + 1);      }      else      {        g.drawString(sTheButton, iX, iY);      }    }  }  /**   * Description of the Method   *   * @param e Description of Parameter   */  public void processEvent(AWTEvent e)  {    repaint();    super.processEvent(e);  }  /**   * Description of the Class   *   * @author administrator   * @created 28 April 2002   */  class GraphicButtonListener extends MouseAdapter  {    /**     * Description of the Method     *     * @param evt Description of Parameter     */    public void mouseEntered(java.awt.event.MouseEvent evt)    {      bOverButton = true;    }    /**     * Description of the Method     *     * @param e Description of Parameter     */    public void mouseExited(java.awt.event.MouseEvent e)    {      bOverButton = false;    }    /**     * Description of the Method     *     * @param e Description of Parameter     */    public void mousePressed(java.awt.event.MouseEvent e)    {      bPressedButton = true;      repaint();    }    /**     * Description of the Method     *     * @param e Description of Parameter     */    public void mouseReleased(java.awt.event.MouseEvent e)    {      if (bPressedButton && bOverButton && bDepressText)      {        dispatchEvent(new ActionEvent(imgButtonUpPic, Event.ACTION_EVENT, sTheButton));      }      bPressedButton = false;      repaint();    }  }}