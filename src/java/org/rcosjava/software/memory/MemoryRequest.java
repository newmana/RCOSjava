package org.rcosjava.software.memory;import java.io.Serializable;import org.rcosjava.hardware.memory.Memory;/** * Structure sent to the MMU requesting pages or byte-count memory. <P> * * HISTORY: 01/01/1998 get/set added, constructors added.<BR> * <P> * * * * @author Andrew Newman. * @author Bruce Jamieson. * @created 1st March 1997 * @version 1.00 $Date$ */public class MemoryRequest implements Serializable{  /**   * The process that sent the request.   */  private int processId;  /**   * The type of memory (stack or program)   */  private byte memoryType;  /**   * How much memory was requested?   */  private int size;  /**   * The offset in a memory block (if required).   */  private int offset;  /**   * The block of memory requested.   */  private Memory myMemory;  /**   * Create a memory request without an offset (set to 0). With no memory block.   *   * @param newProcessId Description of Parameter   * @param newMemoryType Description of Parameter   * @param newSize Description of Parameter   */  public MemoryRequest(int newProcessId, byte newMemoryType, int newSize)  {    processId = newProcessId;    memoryType = newMemoryType;    size = newSize;    offset = 0;  }  /**   * Create a memory request without an offset (set to 0).   *   * @param newProcessId Description of Parameter   * @param newMemoryType Description of Parameter   * @param newSize Description of Parameter   * @param newMemory Description of Parameter   */  public MemoryRequest(int newProcessId, byte newMemoryType, int newSize,      Memory newMemory)  {    this(newProcessId, newMemoryType, newSize);    myMemory = newMemory;  }  /**   * Create a memory request without a memory block but with an offset.   *   * @param newProcessId Description of Parameter   * @param newMemoryType Description of Parameter   * @param newSize Description of Parameter   * @param newOffset Description of Parameter   */  public MemoryRequest(int newProcessId, byte newMemoryType, int newSize,      int newOffset)  {    this(newProcessId, newMemoryType, newSize);    offset = newOffset;  }  /**   * Create a full memory request.   *   * @param newProcessId Description of Parameter   * @param newMemoryType Description of Parameter   * @param newSize Description of Parameter   * @param newOffset Description of Parameter   * @param newMemory Description of Parameter   */  public MemoryRequest(int newProcessId, byte newMemoryType, int newSize,      int newOffset, Memory newMemory)  {    this(newProcessId, newMemoryType, newSize, newOffset);    myMemory = newMemory;  }  /**   * Set the memory type.   *   * @param newMemoryType The new MemoryType value   */  public void setMemoryType(byte newMemoryType)  {    memoryType = newMemoryType;  }  /**   * Set the size of the memory block.   *   * @param newSize The new Size value   */  public void setSize(int newSize)  {    size = newSize;  }  /**   * Set the new memory block.   *   * @param newMemory The new Memory value   */  public void setMemory(Memory newMemory)  {    myMemory = newMemory;  }  /**   * Return the stored Process Identifier.   *   * @return The PID value   */  public int getPID()  {    return processId;  }  /**   * Return the memory type.   *   * @return The MemoryType value   */  public byte getMemoryType()  {    return memoryType;  }  /**   * Return the size of the memory block.   *   * @return The Size value   */  public int getSize()  {    return size;  }  /**   * Return the memory offset.   *   * @return The Offset value   */  public int getOffset()  {    return offset;  }  /**   * Return a copy of the memory block.   *   * @return The Memory value   */  public Memory getMemory()  {    return (Memory) myMemory.clone();  }}