package org.rcosjava.messaging.postoffices.universal;import org.rcosjava.messaging.messages.MessageAdapter;import org.rcosjava.messaging.messages.animator.AnimatorMessageAdapter;import org.rcosjava.messaging.messages.os.OSMessageAdapter;import org.rcosjava.messaging.postoffices.animator.AnimatorOffice;import org.rcosjava.messaging.postoffices.os.OSOffice;import org.rcosjava.pll2.FileClient;/** * A simple player backerer. <P> * * * * @author Andrew Newman. * @created 2nd January 2001 * @see org.rcosjava.messaging.postoffices.os.OSMessageRecorder * @see org.rcosjava.messaging.postoffices.animator.AnimatorMessageRecorder * @version 1.00 $Date$ */public class UniversalMessagePlayer{  /**   * Description of the Field   */  private static int counter = 0;  /**   * Description of the Field   */  private FileClient myClient;  /**   * Description of the Field   */  private String host;  /**   * Description of the Field   */  private int port;  /**   * Description of the Field   */  private String id;  /**   * Description of the Field   */  private OSOffice osPostOffice;  /**   * Description of the Field   */  private AnimatorOffice animatorPostOffice;  /**   * Description of the Field   */  private String fileName;  /**   * @param newHost the local host to connect to.   * @param newPort the local hosts port to connect to.   */  public UniversalMessagePlayer(String newHost, int newPort)  {    host = newHost;    port = newPort;  }  /**   * @param newOSPostOffice the new operating system post office to register to.   * @param host Description of Parameter   * @param port Description of Parameter   * @param newId Description of Parameter   * @param newAnimatorPostOffice Description of Parameter   */  public UniversalMessagePlayer(String host, int port, String newId,      OSOffice newOSPostOffice, AnimatorOffice newAnimatorPostOffice)  {    this(host, port);    animatorPostOffice = newAnimatorPostOffice;    osPostOffice = newOSPostOffice;    id = newId;  }  /**   * Reads the next mesage in order and sends it to the appropriate post   * offices.   *   * @param newFileName the base file name to read.   */  public void sendNextMessage(String newFileName)  {    fileName = newFileName;    MessageAdapter tmpMessage = (MessageAdapter) readMessage();    if (tmpMessage.forPostOffice(osPostOffice) &&        tmpMessage.forPostOffice(animatorPostOffice))    {      osPostOffice.localSendMessage((MessageAdapter) tmpMessage);      animatorPostOffice.localSendMessage((MessageAdapter) tmpMessage);    }    else if (tmpMessage.forPostOffice(osPostOffice))    {      osPostOffice.localSendMessage((OSMessageAdapter) tmpMessage);    }    else if (tmpMessage.forPostOffice(animatorPostOffice))    {      animatorPostOffice.localSendMessage((AnimatorMessageAdapter) tmpMessage);    }  }  /**   * Saves all the messages in a consistent. Called by all 4 process methods.   * Increments the record counter by one.   *   * @return Description of the Returned Value   */  private Object readMessage()  {    myClient = new FileClient(host, port);    myClient.openConnection();    Object tmpObject;    try    {      tmpObject = myClient.getRecFile(java.io.File.separatorChar           + fileName + java.io.File.separatorChar + (counter) + ".xml");      counter++;    }    catch (Exception e)    {      tmpObject = null;      e.printStackTrace();    }    myClient.closeConnection();    return tmpObject;  }}