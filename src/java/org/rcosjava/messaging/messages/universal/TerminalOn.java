package org.rcosjava.messaging.messages.universal;import org.rcosjava.messaging.postoffices.animator.AnimatorMessageHandler;import org.rcosjava.messaging.postoffices.os.OSMessageHandler;import org.rcosjava.software.animator.terminal.TerminalManagerAnimator;import org.rcosjava.software.terminal.TerminalManager;/** * Request that a specific terminal be set to on. <P> * * Usage example: <CODE> *      TerminalOn tmpOn = new UpdateList(this, terminalNo); * </CODE> <P> * * * * @author Andrew Newman. * @created 28th March 1997 * @version 1.00 $Date$ */public class TerminalOn extends UniversalMessageAdapter{  /**   * Description of the Field   */  boolean forAnimator = false;  /**   * Description of the Field   */  private int terminalNo = 0;  /**   * Create the terminal on message given the source and terminal number to set.   *   * @param theSource Description of Parameter   * @param newTerminalNo Description of Parameter   * @param newForAnimator Description of Parameter   */  public TerminalOn(OSMessageHandler theSource, int newTerminalNo,      boolean newForAnimator)  {    super(theSource);    terminalNo = newTerminalNo;    forAnimator = newForAnimator;  }  /**   * Constructor for the TerminalOn object   *   * @param theSource Description of Parameter   * @param newTerminalNo Description of Parameter   * @param newForAnimator Description of Parameter   */  public TerminalOn(AnimatorMessageHandler theSource, int newTerminalNo,      boolean newForAnimator)  {    super(theSource);    terminalNo = newTerminalNo;    forAnimator = newForAnimator;  }  /**   * Create a terminal message but don't allocate a terminal number. The default   * is 0 indicating allocate the next free terminal.   *   * @param theSource Description of Parameter   */  public TerminalOn(AnimatorMessageHandler theSource)  {    super(theSource);  }  /**   * @param newTerminalNo Set the terminal to the new value given.   */  public void setTerminalNo(int newTerminalNo)  {    terminalNo = newTerminalNo;  }  /**   * If the terminal number terminal number is zero the call setNextTerminal on   * Terminal Manager. Otherwise, tried to allocate the given terminal number.   *   * @param theElement Description of Parameter   */  public void doMessage(TerminalManager theElement)  {    if (!forAnimator)    {      theElement.terminalOn(terminalNo);    }  }  /**   * Will call the terminalOn call of the animator if the terminal number is not   * zero.   *   * @param theElement Description of Parameter   */  public void doMessage(TerminalManagerAnimator theElement)  {    if (forAnimator)    {      theElement.terminalOn(terminalNo);    }  }}